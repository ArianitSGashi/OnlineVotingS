@using OnlineVotingS.Domain.Enums;
@model RegisterViewModel
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register</title>
    <link rel="stylesheet" href="/css/register.css">
    <style>
        .text-danger {
            color: red;
        }
    </style>
    <script>
        // JavaScript to display an alert if registration failed
        window.onload = function() {
            var registerFailed = '@ViewBag.RegisterFailed';
            if (registerFailed === 'True') {
                alert('Registration failed. Please check the errors and try again.');
            }
        };
    </script>
</head>
<body>
    <div class="wrapper">
        <form asp-action="Register" asp-controller="Auth">
            @Html.AntiForgeryToken()
            <h2>Register</h2>

            @Html.ValidationSummary(true, "", new { @class = "validation-summary" })

            <div class="input-field">
                @Html.TextBoxFor(model => model.Id, new { @class = "input-field", required = true })
                @Html.LabelFor(model => model.Id)
                @Html.ValidationMessageFor(model => model.Id, "", new { @class = "text-danger" })
            </div>

            <div class="input-field">
                @Html.TextBoxFor(model => model.UserName, new { @class = "input-field", required = true })
                @Html.LabelFor(model => model.UserName)
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>

            <div class="input-field">
                @Html.TextBoxFor(model => model.Email, new { @class = "input-field", required = true })
                @Html.LabelFor(model => model.Email)
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>

            <div class="input-field">
                @Html.TextBoxFor(model => model.Name, new { @class = "input-field", required = true })
                @Html.LabelFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>

            <div class="input-field">
                @Html.TextBoxFor(model => model.FathersName, new { @class = "input-field", required = true })
                @Html.LabelFor(model => model.FathersName)
                @Html.ValidationMessageFor(model => model.FathersName, "", new { @class = "text-danger" })
            </div>

            <div class="input-field">
                @Html.DropDownListFor(
                    model => model.Gender,
                    new SelectList(
                        Enum.GetValues(typeof(Gender)).Cast<Gender>().Select(e => new { Value = e, Text = e.ToString() }),
                        "Value",
                        "Text"
                    ),
                    "Select Gender",
                    new { @class = "input-field", required = true }
                )
                @Html.LabelFor(model => model.Gender)
            </div>

            <div class="input-field">
                @Html.TextBoxFor(model => model.DateOfBirth, new { @class = "input-field", type = "date", required = true })
                @Html.LabelFor(model => model.DateOfBirth)
                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
            </div>

            <div class="input-field">
                @Html.TextBoxFor(model => model.Address, new { @class = "input-field", required = true })
                @Html.LabelFor(model => model.Address)
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>

            <div class="input-field">
                @Html.TextBoxFor(model => model.MobileNumber, new { @class = "input-field", required = true })
                @Html.LabelFor(model => model.MobileNumber)
                @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })
            </div>

           <div class="input-field">
               @Html.PasswordFor(model => model.Password, new { @class = "input-field", required = true })
               @Html.LabelFor(model => model.Password)
               @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
           </div>

           <div class="input-field">
               @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "input-field", required = true })
               @Html.LabelFor(model => model.ConfirmPassword)
               @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
           </div>

            <button type="submit">Register</button>
            <div class="register">
                <p>Have an account? @Html.ActionLink("Login", "Login", "Auth")</p>
            </div>
        </form>
    </div>
</body>
</html>
